name: Amplify CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
      - develop
  pull_request:
    branches:
      - main
      - staging

env:
  NODE_VERSION: '22.x'

jobs:
  # Environment validation job
  validate-environment:
    name: Validate Environment Variables
    runs-on: ubuntu-latest
    strategy:
      matrix:
        validation-type: [frontend, backend, server]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set environment variables for validation
        run: |
          # Set minimal environment variables for validation
          echo "STAGE=dev" >> $GITHUB_ENV
          echo "TABLE_NAME=personalSiteData-dev" >> $GITHUB_ENV
          echo "RATE_LIMIT_MAX=10" >> $GITHUB_ENV
          echo "RATE_LIMIT_WINDOW=60" >> $GITHUB_ENV
          echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
          echo "CORS_ORIGIN=http://localhost:3000" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_API_URL=http://localhost:3000/api" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_SITE_URL=http://localhost:3000" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_STAGE=dev" >> $GITHUB_ENV
          echo "API_ENDPOINT=http://localhost:3000/api" >> $GITHUB_ENV

      - name: Validate ${{ matrix.validation-type }} environment
        run: npm run validate:env:${{ matrix.validation-type }}

  # Code quality checks
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: validate-environment
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

      - name: Type check
        run: npx tsc --noEmit

  # Build test
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [validate-environment, code-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set build environment variables
        run: |
          echo "STAGE=dev" >> $GITHUB_ENV
          echo "TABLE_NAME=personalSiteData-dev" >> $GITHUB_ENV
          echo "RATE_LIMIT_MAX=10" >> $GITHUB_ENV
          echo "RATE_LIMIT_WINDOW=60" >> $GITHUB_ENV
          echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
          echo "CORS_ORIGIN=http://localhost:3000" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_API_URL=http://localhost:3000/api" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_SITE_URL=http://localhost:3000" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_STAGE=dev" >> $GITHUB_ENV
          echo "API_ENDPOINT=http://localhost:3000/api" >> $GITHUB_ENV
          echo "AMPLIFY_APP_ID=test-app-id" >> $GITHUB_ENV
          echo "AMPLIFY_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "AMPLIFY_COMMIT_ID=${{ github.sha }}" >> $GITHUB_ENV

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next/
          retention-days: 1

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate-environment
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Check for known vulnerabilities
        run: |
          # Check for common security issues in dependencies
          npx audit-ci --moderate

  # Amplify deployment notification
  amplify-deploy:
    name: Amplify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-test, security-scan]
    if: github.event_name == 'push'
    
    steps:
      - name: Deployment notification
        run: |
          echo "🚀 Code pushed to ${{ github.ref_name }} branch"
          echo "📦 Amplify will automatically deploy this build"
          echo "🔗 Check deployment status in Amplify Console"
          echo "📊 Environment: ${{ github.ref_name == 'main' && 'production' || github.ref_name }}"

  # Post-deployment validation (runs after Amplify deployment)
  post-deployment:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: amplify-deploy
    if: github.event_name == 'push' && github.ref_name == 'main'
    
    steps:
      - name: Wait for deployment
        run: |
          echo "⏳ Waiting for Amplify deployment to complete..."
          sleep 60  # Wait for deployment to propagate

      - name: Health check
        run: |
          # This would be replaced with actual health check URL in production
          echo "🏥 Running health checks..."
          echo "✅ Health check would verify API endpoints are responding"
          echo "✅ Health check would verify CORS headers are correct"
          echo "✅ Health check would verify environment variables are loaded"

      - name: Performance check
        run: |
          echo "⚡ Running performance checks..."
          echo "✅ Performance check would verify Lighthouse scores"
          echo "✅ Performance check would verify bundle size limits"

# Workflow summary
summary:
  name: Workflow Summary
  runs-on: ubuntu-latest
  needs: [validate-environment, code-quality, build-test, security-scan]
  if: always()
  
  steps:
    - name: Workflow Summary
      run: |
        echo "## 📋 Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Environment Validation | ${{ needs.validate-environment.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Test | ${{ needs.build-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Amplify will automatically deploy successful builds" >> $GITHUB_STEP_SUMMARY
        echo "- Check the Amplify Console for deployment status" >> $GITHUB_STEP_SUMMARY
        echo "- Monitor CloudWatch logs for any runtime issues" >> $GITHUB_STEP_SUMMARY